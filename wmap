#!/usr/bin/env python3
import argparse
import os
import subprocess
import logging
from utils import wpa_sec, scapy_parser
from config.config import CONFIG, setup_logging
from utils.setup_work import get_db_connection, ensure_directories_and_database


def main():
    """Main function for wmap: handling scanning, parsing, and WPA-SEC interactions."""
    # Ensure directories, initialize database, and setup logging
    ensure_directories_and_database()
    setup_logging()
    logger = logging.getLogger("wmap")
    logger.info("Starting wmap application.")

    # Open a single database connection
    with get_db_connection() as db_conn:
        logger.info("Database connection established.")

        # Initialize Argparse
        parser = argparse.ArgumentParser(description='Wireless capturing, parsing, and analyzing.')

        # Adding arguments
        parser.add_argument("--active", action="store_true", help="Enable active scanning mode")
        parser.add_argument("--passive", action="store_true", help="Enable passive scanning mode")
        parser.add_argument("interface", nargs="?",
                            help="Name of the wireless interface (optional if parsing existing file)")
        parser.add_argument("-u", "--upload", nargs="?", const=CONFIG["capture_dir"],
                            help="Upload a specific PCAP file or all unmarked files in the capture directory.")
        parser.add_argument("-d", "--download", nargs="?", const=os.path.join(CONFIG["capture_dir"], "wpa-sec.potfile"),
                            help="Download potfile from WPA-SEC (default path if no path provided).")
        parser.add_argument("--set-key", type=str, help="Set the WPA-SEC key in the database.")
        parser.add_argument("--get-key", action="store_true", help="Get the WPA-SEC key from the database.")
        parser.add_argument("--no-webserver", action="store_true",
                            help="Disable web server and run CLI-only operations.")
        parser.add_argument("--parse-existing", type=str,
                            help="Parse an existing capture file (e.g., /path/to/file.pcap).")

        args = parser.parse_args()
        logger.debug(f"Parsed arguments: {args}")

        # Ensure capture directory exists
        os.makedirs(CONFIG["capture_dir"], exist_ok=True)
        logger.info(f"Capture directory ensured: {CONFIG['capture_dir']}")

        # **Handle WPA-SEC related actions**
        if wpa_sec.handle_wpa_sec_actions(args, db_conn):
            logger.info("Handled WPA-SEC related action. Exiting.")
            return

        # **Handle parsing of existing capture files**
        if args.parse_existing:
            logger.info(f"Parsing existing file: {args.parse_existing}")
            scapy_parser.process_pcap(args.parse_existing, db_conn)
            logger.info("Parsing and storing complete.")
            return

        capture_file = os.path.join(CONFIG["capture_dir"], 'wmap.pcapng')
        logger.debug(f"Capture file path set to: {capture_file}")

        # Ensure interface is provided for scanning modes
        if not args.interface:
            logger.error("An interface must be specified for active or passive scanning modes.")
            parser.error("An interface must be specified for active or passive scanning modes.")

        # **Handle active/passive scanning**
        hcxdumptool_command = None
        if args.active:
            hcxdumptool_command = f"hcxdumptool -i {args.interface} -o {capture_file}"
        elif args.passive:
            hcxdumptool_command = f"hcxdumptool -i {args.interface} -w {capture_file} --disable_deauthentication --disable_proberequest --disable_association --disable_reassociation --disable_beacon"

        # Start hcxdumptool as a non-blocking subprocess
        if hcxdumptool_command:
            logger.info(f"Starting hcxdumptool: {hcxdumptool_command}")
            proc = subprocess.Popen(hcxdumptool_command, shell=True)

            try:
                logger.info(f"Starting live scan on interface: {args.interface}")
                scapy_parser.live_scan(capture_file, db_conn, proc)  # Pass capture file & process to live_scan
            finally:
                proc.terminate()
                logger.info("Stopped hcxdumptool and live scan.")

        # **Start Web Server (if enabled)**
        if not args.no_webserver:
            logger.info("Starting web server.")
            # Insert logic to start the web server if needed
            pass

        logger.info("wmap application finished.")


if __name__ == "__main__":
    main()