#!/usr/bin/env Python3
import os
import argparse
import signal
import subprocess
import logging
import time

from config.config import CONFIG, setup_logging
from utils import scapy_parser
from utils.setup_work import get_db_connection, ensure_directories_and_database



def main():
    """Main function to handle CLI arguments and manage scanning operations."""
    ensure_directories_and_database()
    setup_logging()
    logger = logging.getLogger("wmap")
    logger.info("Starting wmap application.")

    parser = argparse.ArgumentParser(description='Wireless capturing, parsing, and analyzing.')
    parser.add_argument("--active", action="store_true", help="Enable active scanning mode")
    parser.add_argument("--passive", action="store_true", help="Enable passive scanning mode")
    parser.add_argument("interface", nargs="?", help="Wireless interface name (required for live scanning)")
    parser.add_argument("--parse-existing", type=str, help="Parse an existing PCAP file (e.g., /path/to/file.pcap)")

    args = parser.parse_args()
    logger.debug(f"Parsed arguments: {args}")

    with get_db_connection() as db_conn:
        logger.info("Database connection established.")

        # **Handle parsing of an existing capture file**
        if args.parse_existing:
            logger.info(f"Parsing existing file: {args.parse_existing}")
            scapy_parser.process_pcap(args.parse_existing, db_conn)
            logger.info("Parsing and storing complete.")
            return

        capture_file = os.path.join(CONFIG["capture_dir"], "wmap.pcapng")
        logger.debug(f"Capture file path set to: {capture_file}")

        # **Ensure interface is provided for scanning modes**
        if not args.interface:
            logger.error("An interface must be specified for active or passive scanning modes.")
            parser.error("An interface must be specified for active or passive scanning modes.")

        # **Start hcxdumptool scanning**
        hcxdumptool_cmd = (
            f"hcxdumptool -i {args.interface} -o {capture_file} --enable_status=1"
            if args.active else
            f"hcxdumptool -i {args.interface} -w {capture_file} --disable_deauthentication --disable_proberequest"
        )
        logger.info(f"Starting hcxdumptool with command: {hcxdumptool_cmd}")
        process = subprocess.Popen(hcxdumptool_cmd, shell=True, preexec_fn=os.setsid)

        try:
            # **Wait for capture file before parsing**
            while not os.path.exists(capture_file):
                logger.info(f"Waiting for capture file: {capture_file}")
                time.sleep(3)

            # **Start real-time parsing**
            scapy_parser.live_scan(capture_file, db_conn)

        except KeyboardInterrupt:
            logger.info("Stopping hcxdumptool...")
            os.killpg(os.getpgid(process.pid), signal.SIGTERM)
        finally:
            logger.info("wmap application finished.")

if __name__ == "__main__":
    main()
